using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp16
{
    class Program
    {
        static void Main(string[] args)
        {



            //char [,] tablero = new char [13,7];
            //inicializar tablero
            //InicializarTab(ref tablero);
            int posx, posy;
            string Jugador1 = "", Jugador2 = "";
            bool esTurnoJugador1 = true;
            ConsoleKey command;

            Console.WriteLine("Bienvenido al Tres en Raya!!!");
            Console.WriteLine("_____________________________\n");
            Console.WriteLine();
            //pedimos nombre al jugador 1
            while (Jugador1 == "")
            {
                Console.WriteLine("Jugador 1. Jugarás con la X. Introduce tu nombre:");
                Jugador1 = Console.ReadLine();
                Console.WriteLine();
            }
            //pedimos nombre al jugador 2
            while (Jugador2 == "")
            {
                Console.WriteLine("Jugador 2. Jugarás con el o. Introduce tu nombre:");
                Jugador2 = Console.ReadLine();
                Console.WriteLine();
            }
            DibujarTablero();

            //determinar que a quien le toca juagar a la 1 o al 2
            string nombreJugador = "";
            if (esTurnoJugador1)
            {
                nombreJugador = Jugador1;
            }
            else
            {
                nombreJugador = Jugador2;
            }

            //saber que caracter usa cada uno
            char caracterusado = ' ';
            if (esTurnoJugador1)
            {
                caracterusado = 'x';
            }
            else
            {
                caracterusado = 'o';
            }

            posx = 2;
            posy = 1;
            Console.SetCursorPosition(posx, posy);
            command = Console.ReadKey().Key;
            do
            {
                switch (command)
                {
                    case ConsoleKey.LeftArrow:
                        if (posx == 2 && posy == 1)
                        {
                            posx = 10;
                            posy = 1;
                        }
                        else if (posx == 10 && posy == 1)
                        {
                            posx = 6;
                            posy = 1;
                        }
                        else if (posx == 6 && posy == 1)
                        {
                            posx = 2;
                            posy = 1;
                        }


                        else if (posx == 2 && posy == 3)
                        {
                            posx = 10;
                            posy = 3;
                        }
                        else if (posx == 10 && posy == 3)
                        {
                            posx = 6;
                            posy = 3;
                        }
                        else if (posx == 6 && posy == 3)
                        {
                            posx = 2;
                            posy = 3;
                        }



                        else if (posx == 2 && posy == 5)
                        {
                            posx = 10;
                            posy = 5;
                        }
                        else if (posx == 10 && posy == 5)
                        {
                            posx = 6;
                            posy = 5;
                        }
                        else if (posx == 6 && posy == 5)
                        {
                            posx = 2;
                            posy = 5;
                        }



                        break;
                    case ConsoleKey.RightArrow:
                        if (posx == 2 && posy == 1)
                        {
                            posx = 6;
                            posy = 1;
                        }

                        else if (posx == 6 && posy == 1)
                        {
                            posx = 10;
                            posy = 1;
                        }
                        else if (posx == 10 && posy == 1)
                        {
                            posx = 2;
                            posy = 1;
                        }


                        else if (posx == 2 && posy == 3)
                        {
                            posx = 6;
                            posy = 3;
                        }
                        else if (posx == 6 && posy == 3)
                        {
                            posx = 10;
                            posy = 3;
                        }
                        else if (posx == 10 && posy == 3)
                        {
                            posx = 2;
                            posy = 3;
                        }


                        else if (posx == 2 && posy == 5)
                        {
                            posx = 6;
                            posy = 5;
                        }
                        else if (posx == 6 && posy == 5)
                        {
                            posx = 10;
                            posy = 5;
                        }
                        else if (posx == 10 && posy == 5)
                        {
                            posx = 2;
                            posy = 5;
                        }


                        break;
                    case ConsoleKey.UpArrow:

                        if (posx == 2 && posy == 1)
                        {
                            posx = 2;
                            posy = 5;
                        }
                        else if (posx == 2 && posy == 5)
                        {
                            posx = 2;
                            posy = 3;
                        }
                        else if (posx == 2 && posy == 3)
                        {
                            posx = 2;
                            posy = 1;
                        }


                        else if (posx == 6 && posy == 1)
                        {
                            posx = 6;
                            posy = 5;
                        }
                        else if (posx == 6 && posy == 5)
                        {
                            posx = 6;
                            posy = 3;
                        }
                        else if (posx == 6 && posy == 3)
                        {
                            posx = 6;
                            posy = 1;
                        }


                        else if (posx == 10 && posy == 1)
                        {
                            posx = 10;
                            posy = 5;
                        }
                        else if (posx == 10 && posy == 5)
                        {
                            posx = 10;
                            posy = 3;
                        }
                        else if (posx == 10 && posy == 3)
                        {
                            posx = 10;
                            posy = 1;
                        }
                        break;
                    case ConsoleKey.DownArrow:

                        if (posx == 2 && posy == 1)
                        {
                            posx = 2;
                            posy = 3;
                        }

                        else if (posx == 2 && posy == 3)
                        {
                            posx = 2;
                            posy = 5;
                        }
                        else if (posx == 2 && posy == 5)
                        {
                            posx = 2;
                            posy = 1;
                        }

                        else if (posx == 6 && posy == 1)
                        {
                            posx = 6;
                            posy = 3;
                        }
                        else if (posx == 6 && posy == 3)
                        {
                            posx = 6;
                            posy = 5;
                        }
                        else if (posx == 6 && posy == 5)
                        {
                            posx = 6;
                            posy = 1;
                        }


                        else if (posx == 10 && posy == 1)
                        {
                            posx = 10;
                            posy = 3;
                        }
                        else if (posx == 10 && posy == 3)
                        {
                            posx = 10;
                            posy = 5;
                        }
                        else if (posx == 10 && posy == 5)
                        {
                            posx = 10;
                            posy = 1;
                        }

                     break;
                    //case ConsoleKey.x:
                    //    break;
                    //default:
                    //    ConsoleKey.o;
                    //    break;

                }

                Console.SetCursorPosition(posx, posy);
                /*  Console.Read();*/
                command = Console.ReadKey().Key;

            } while (command != ConsoleKey.Escape);
        }


        //metodo que devuelve las cadenas
        //metodo para inicializar los espacios del array
        static void InicializarTab(ref char[,] tablero)
        {

            for (int contador1 = 0; contador1 < 3; contador1++)
            {

                for (int contador2 = 0; contador2 < 3; contador2++)
                {
                    tablero[contador1, contador2] = ' ';
                }
            }
        }
        //dibujar el tablero

        static void DibujarTablero()
        {
            Console.Clear();


            //primera fila
            Console.SetCursorPosition(0, 0);
            Console.WriteLine("┌");
            Console.SetCursorPosition(1, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(2, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(3, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(4, 0);
            Console.WriteLine("┬");
            Console.SetCursorPosition(5, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(6, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(7, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(8, 0);
            Console.WriteLine("┬");
            Console.SetCursorPosition(9, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(10, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(11, 0);
            Console.WriteLine("─");
            Console.SetCursorPosition(12, 0);
            Console.WriteLine("┐");

            //segundafila a rellenar
            Console.SetCursorPosition(0, 1);
            Console.WriteLine("│");
            Console.SetCursorPosition(1, 1);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(2, 1);
            Console.WriteLine("");

            Console.SetCursorPosition(3, 1);
            Console.WriteLine("");
            Console.SetCursorPosition(4, 1);
            Console.WriteLine("│");
            Console.SetCursorPosition(5, 1);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(6, 1);
            Console.WriteLine("");

            Console.SetCursorPosition(7, 1);
            Console.WriteLine("");
            Console.SetCursorPosition(8, 1);
            Console.WriteLine("│");
            Console.SetCursorPosition(9, 1);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(10, 1);
            Console.WriteLine("");

            Console.SetCursorPosition(11, 1);
            Console.WriteLine("");
            Console.SetCursorPosition(12, 1);
            Console.WriteLine("│");
            //tercer fila
            Console.SetCursorPosition(0, 2);
            Console.WriteLine("├");
            Console.SetCursorPosition(1, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(2, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(3, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(4, 2);
            Console.WriteLine("┼");
            Console.SetCursorPosition(5, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(6, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(7, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(8, 2);
            Console.WriteLine("┼");
            Console.SetCursorPosition(9, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(10, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(11, 2);
            Console.WriteLine("─");
            Console.SetCursorPosition(12, 2);
            Console.WriteLine("┤");
            //cuarta fila rellenar
            Console.SetCursorPosition(0, 3);
            Console.WriteLine("│");
            Console.SetCursorPosition(1, 3);
            Console.WriteLine("");
            //rellenar
            Console.SetCursorPosition(2, 3);
            Console.WriteLine("");

            Console.SetCursorPosition(3, 3);
            Console.WriteLine("");
            Console.SetCursorPosition(4, 3);
            Console.WriteLine("│");
            Console.SetCursorPosition(5, 3);
            Console.WriteLine("");
            //rellenar
            Console.SetCursorPosition(6, 3);
            Console.WriteLine("");

            Console.SetCursorPosition(7, 3);
            Console.WriteLine("");
            Console.SetCursorPosition(8, 3);
            Console.WriteLine("│");
            Console.SetCursorPosition(9, 3);
            Console.WriteLine("");
            //rellenar
            Console.SetCursorPosition(10, 3);
            Console.WriteLine("");

            Console.SetCursorPosition(11, 3);
            Console.WriteLine("");
            Console.SetCursorPosition(12, 3);
            Console.WriteLine("│");
            //quinta fila
            Console.SetCursorPosition(0, 4);
            Console.WriteLine("├");
            Console.SetCursorPosition(1, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(2, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(3, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(4, 4);
            Console.WriteLine("┼");
            Console.SetCursorPosition(5, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(6, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(7, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(8, 4);
            Console.WriteLine("┼");
            Console.SetCursorPosition(9, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(10, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(11, 4);
            Console.WriteLine("─");
            Console.SetCursorPosition(12, 4);
            Console.WriteLine("┤");
            //sexta fila
            Console.SetCursorPosition(0, 5);
            Console.WriteLine("│");
            Console.SetCursorPosition(1, 5);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(2, 5);
            Console.WriteLine("");

            Console.SetCursorPosition(3, 5);
            Console.WriteLine("");
            Console.SetCursorPosition(4, 5);
            Console.WriteLine("│");
            Console.SetCursorPosition(5, 5);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(6, 5);
            Console.WriteLine("");

            Console.SetCursorPosition(7, 5);
            Console.WriteLine("");
            Console.SetCursorPosition(8, 5);
            Console.WriteLine("│");
            Console.SetCursorPosition(9, 5);
            Console.WriteLine("");
            //***//
            Console.SetCursorPosition(10, 5);
            Console.WriteLine("");

            Console.SetCursorPosition(11, 5);
            Console.WriteLine("");
            Console.SetCursorPosition(12, 5);
            Console.WriteLine("│");

            //septima fila
            Console.SetCursorPosition(0, 6);
            Console.WriteLine("└");
            Console.SetCursorPosition(1, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(2, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(3, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(4, 6);
            Console.WriteLine("┴");
            Console.SetCursorPosition(5, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(6, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(7, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(8, 6);
            Console.WriteLine("┴");
            Console.SetCursorPosition(9, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(10, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(11, 6);
            Console.WriteLine("─");
            Console.SetCursorPosition(12, 6);
            Console.WriteLine("┘");

        }

        static char Ganador(char[,] tablero)
        {
            //comprobar horizontalemente
            if (tablero[2, 1] == tablero[6, 1] && tablero[6, 1] == tablero[10, 1] && tablero[2, 1] != ' ')
            {
                return tablero[2, 1];
            }
            if (tablero[2, 3] == tablero[6, 3] && tablero[6, 3] == tablero[10, 3] && tablero[2, 3] != ' ')
            {
                return tablero[2, 3];
            }
            if (tablero[2, 5] == tablero[6, 5] && tablero[6, 5] == tablero[10, 5] && tablero[2, 5] != ' ')
            {
                return tablero[2, 5];
            }

            //comprobar verticalmente
            if (tablero[2, 1] == tablero[2, 3] && tablero[2, 3] == tablero[2, 5] && tablero[2, 1] != ' ')
            {
                return tablero[2, 1];
            }
            if (tablero[6, 1] == tablero[6, 3] && tablero[6, 3] == tablero[6, 5] && tablero[6, 1] != ' ')
            {
                return tablero[0, 1];
            }
            if (tablero[10, 1] == tablero[10, 3] && tablero[10, 3] == tablero[10, 5] && tablero[10, 1] != ' ')
            {
                return tablero[10, 1];
            }

            //comprobar diagonalmente
            if (tablero[2, 1] == tablero[6, 3] && tablero[6, 3] == tablero[10, 5] && tablero[2, 1] != ' ')
            {
                return tablero[2, 1];
            }

            if (tablero[10, 1] == tablero[6, 3] && tablero[6, 3] == tablero[2, 5] && tablero[10, 1] != ' ')
            {
                return tablero[10, 1];
            }

            return ' ';
        }
        static bool HayGanador(char[,] tablero)
        {

            return Ganador(tablero) != ' ';
        }
        //ver si estan ocupadas las casillas
        static bool EstaOcupado(char[,] tablero, int x, int y)
        {
            if (x < 0 || x > 2)
            {

                throw new ArgumentException("El valor de x debe ser 0,1,2", "x");
            }
            if (y < 0 || y > 2)
            {

                throw new ArgumentException("El valor de y debe ser 0,1,2", "y");
            }
            return tablero[x, y] != ' ';
        }

        static bool EstaOcupado(char[,] tablero, string coordenada)
        {
            coordenada = coordenada.ToUpper();

            switch (coordenada)
            {
                case "A1":
                    return EstaOcupado(tablero, 0, 0);
                case "A2":
                    return EstaOcupado(tablero, 0, 1);
                case "A3":
                    return EstaOcupado(tablero, 0, 2);
                case "B1":
                    return EstaOcupado(tablero, 1, 0);
                case "B2":
                    return EstaOcupado(tablero, 1, 1);
                case "B3":
                    return EstaOcupado(tablero, 1, 2);
                case "C1":
                    return EstaOcupado(tablero, 2, 0);
                case "C2":
                    return EstaOcupado(tablero, 2, 1);
                case "C3":
                    return EstaOcupado(tablero, 2, 2);
            }
            return false;
        }

        //rellenar las casillas
        static void PonerCordenadas(ref char[,] tablero, string coordenada, char letra)
        {
            coordenada = coordenada.ToUpper();
            ConsoleKey command = Console.ReadKey().Key;
            switch (command)
            {
                case ConsoleKey.LeftArrow:
                    Console.SetCursorPosition(2, 1);
                    break;
                case ConsoleKey.UpArrow:
                    Console.SetCursorPosition(2, 1);
                    break;
                case ConsoleKey.RightArrow:
                    Console.SetCursorPosition(2, 1);
                    break;
                case ConsoleKey.DownArrow:
                    Console.SetCursorPosition(2, 1);
                    break;
            }
            switch (coordenada)
            {
                case "A1":
                    tablero[0, 0] = letra;
                    return;
                case "A2":
                    tablero[0, 1] = letra;
                    return;
                case "A3":
                    tablero[0, 2] = letra;
                    return;
                case "B1":
                    tablero[1, 0] = letra;
                    return;
                case "B2":
                    tablero[1, 1] = letra;
                    return;
                case "B3":
                    tablero[1, 2] = letra;
                    return;
                case "C1":
                    tablero[2, 0] = letra;
                    return;
                case "C2":
                    tablero[2, 1] = letra;
                    return;
                case "C3":
                    tablero[2, 2] = letra;
                    return;
            }

        }
    












            //validar si la coordenada es valida
            static bool CoordenadaValida(string coordenada)
            {
                switch (coordenada)
                {
                    case "X":
                    case "O":
                        return true;
                    default:
                        return false;
                }
            }


            //validar si el tablero esta lleno
            static bool TableroLleno(char[,] tablero)
            {
                if (tablero[2, 1] != ' ' && tablero[6, 1] != ' ' && tablero[10, 1] != ' '
                && tablero[2, 3] != ' ' && tablero[6, 3] != ' ' && tablero[10, 3] != ' '
                && tablero[2, 5] != ' ' && tablero[6, 5] != ' ' && tablero[10, 5] != ' ')
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    }
